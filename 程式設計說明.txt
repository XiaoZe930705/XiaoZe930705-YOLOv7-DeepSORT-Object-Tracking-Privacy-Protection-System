這段程式碼的主要目的是進行人流分析，重點關注人流的停滯時間、壅塞狀況與舒適度等參數。以下是針對這三方面進行的設計原理說明：

### 1. **人流停滯時間**
   程式使用 DeepSORT 演算法來追蹤影像中的每個人，透過追蹤 ID（`identities`），程式能夠持續記錄每個人在畫面中停留的時間。

   具體的處理方式如下：
   - **到達事件**：當 DeepSORT 偵測到新的人物（即追蹤 ID 新出現在畫面中），程式會將其記錄在 `active_objects` 字典中，並記錄該人物的 `start_time` 以及對應的 `arrival_time`。
   - **離開事件**：當人物的追蹤 ID 消失（即 DeepSORT 偵測不到該人物），程式會將這名人物標記為已離開，並計算其在畫面中停留的總時間，接著將此資訊插入資料庫中的 `StayRecord` 表格，以記錄該人物的停留時間。

### 2. **壅塞狀況**
   壅塞狀況的設計基於每個位置的**容納人數**和該位置的**空間大小**來計算。主要涉及以下參數：
   - `spatial_density`：代表位置的空間大小（例如幾平方公尺）。
   - `limit_the_number_of_people`：每平方公尺的最大容納人數，使用者可以調整該參數。

   這些參數會被用來計算**壅塞閾值**，即該位置最多能容納多少人（`congestion_threshold`），並依此劃分不同的壅塞狀態：
   - **壅塞狀態**（occupancy_rate ≥ 100%）：當實時偵測到的 `occupancy_rate`（佔有率）大於等於100%，則認為該地區處於壅塞狀態，並在畫面上以紅色文字顯示「壅塞」。
   - **即將壅塞**（80% ≤ occupancy_rate < 100%）：當佔有率介於80%到100%之間時，顯示為「即將壅塞」。
   - **正常狀態**（60% ≤ occupancy_rate < 80%）：當佔有率介於60%到80%之間時，顯示為「正常」。
   - **舒適狀態**（occupancy_rate < 60%）：當佔有率低於60%時，顯示為「舒適」，並以藍色文字呈現。

   這些佔有率會定期每60秒插入資料庫中的 `TrafficStats` 表格中記錄，包括開始時間、結束時間、偵測到的人數、平均停留時間和佔有率。

### 3. **舒適度狀況**
   舒適度狀況的判斷和壅塞狀況類似，都是基於佔有率來評估的。當佔有率低於60%時，程式會認為當前地區是「舒適」的，並記錄到 `ComfortRecord` 表格。

   在每60秒的時間窗口內，會根據佔有率是否低於壅塞或舒適的閾值來插入對應的記錄：
   - 當佔有率低於60%時，將該時間段的舒適狀況記錄到 `ComfortRecord` 表中。
   - 若佔有率超過100%，則將壅塞狀況記錄到 `CongestionRecord` 表中。




----------------------------------------------------------------------------------

**停留時間**的計算在這段程式碼中是針對每個個體（透過 DeepSORT 的追蹤 ID）來進行的，以下是詳細的說明：

### 1. **追蹤進入與離開事件**
   每當 DeepSORT 偵測到新的人物進入畫面時，程式會記錄該人物的進入時間，並將這個人物的資料存入 `active_objects` 字典中。這個字典會追蹤每個人在畫面中的停留時間，具體包括：
   - `start_time`: 該人物進入畫面的時間，這個時間以 UNIX 時間戳（`time.time()`）的形式儲存。
   - `arrival_time`: 進入畫面的具體時間（`datetime.now()`），這是以可讀的日期時間形式存儲的。

### 2. **停留時間的計算**
   當 DeepSORT 不再偵測到某個人物（即該人物的 ID 消失），程式就會視其為「離開」，並執行以下步驟來計算該人物的停留時間：
   - 從 `active_objects` 中提取出該人物的 `start_time`（進入畫面的時間）和 `arrival_time`。
   - 透過當前時間（`time.time()`）減去 `start_time`，來計算該人物在畫面中的停留秒數（`duration_seconds`）。
   - 接著，將這段秒數轉換為分鐘數，並且四捨五入至小數點後兩位，以分為單位表示其停留時間（`duration_minutes`）。

### 3. **將停留時間記錄到資料庫**
   在人物離開時，程式會把其停留時間記錄到資料庫中的 `StayRecord` 表格。每當人物離開，程式會：
   - 插入一筆新的停留記錄，包含以下欄位：
     - `PersonID`: 該人物的 ID，對應於資料庫中的 `Person` 表格。
     - `LocationID`: 人物所在的位置 ID。
     - `ArrivalTime`: 人物進入畫面的時間。
     - `DepartureTime`: 人物離開畫面的時間。
     - `Duration`: 停留的分鐘數，四捨五入至兩位小數。
   
   這樣每個人物的停留記錄都會被詳細記錄到資料庫中，並與其所對應的位置資訊相關聯。

### 4. **統計停留時間**
   在每60秒的時間窗口內，程式還會計算當前所有人物的平均停留時間，包含當前仍在畫面中的人物與已經離開的人的停留時間。具體計算方法：
   - 將所有在畫面中的人物的停留時間（`time.time() - data['start_time']`）加總。
   - 將已離開的人的停留時間加總。
   - 計算平均停留時間，並將結果記錄到 `TrafficStats` 表格中。

### 5. **範例：計算停留時間**
   例如，當某個人進入畫面的時間為 `14:00:00`，離開時間為 `14:05:30`，其停留的總時間就是 `5 分 30 秒`。程式會將此資訊轉換為分鐘數（5.5 分鐘），然後記錄到資料庫中。

