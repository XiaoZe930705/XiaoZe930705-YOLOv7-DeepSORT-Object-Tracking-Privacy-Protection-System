好的，停留時長可以以分鐘為單位。以下是重新設計的資料表，並詳細說明每個表的結構與設計思路。

---

### **重新設計的資料表結構**

**1. Person 表**

用於儲存人員的基本資訊。

```sql
CREATE TABLE Person (
    PersonID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
    DetectionID INT NOT NULL  -- 外部檢測系統的ID
);
```

- **PersonID**：系統自動生成的唯一識別碼，用於區分不同的人員。
- **DetectionID**：外部檢測系統分配的ID，例如來自DeepSort的追蹤ID。

---

**2. Location 表**

用於儲存監控的地點資訊。

```sql
CREATE TABLE Location (
    LocationID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
    LocationName VARCHAR(100) NOT NULL,  -- 地點名稱
    Area FLOAT NOT NULL                  -- 地點面積（平方米）
);
```

- **LocationID**：地點的唯一識別碼。
- **LocationName**：地點的名稱，例如「大廳」、「走廊」等。
- **Area**：地點的面積，用於計算佔用率和壅塞程度。

---

**3. StayRecord 表**

用於記錄人員在某個地點的停留資訊。

```sql
CREATE TABLE StayRecord (
    StayRecordID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
    PersonID INT NOT NULL FOREIGN KEY REFERENCES Person(PersonID),
    LocationID INT NOT NULL FOREIGN KEY REFERENCES Location(LocationID),
    ArrivalTime DATETIME NOT NULL,     -- 進入地點的時間
    DepartureTime DATETIME NULL,       -- 離開地點的時間（允許為空，表示尚未離開）
    Duration INT NULL                  -- 停留時長（分鐘），可在DepartureTime確定後計算
);
```

- **StayRecordID**：停留記錄的唯一識別碼。
- **PersonID**：關聯到Person表，指示是哪位人員。
- **LocationID**：關聯到Location表，指示停留的地點。
- **ArrivalTime**：人員進入地點的時間。
- **DepartureTime**：人員離開地點的時間（如果為空，表示人員仍在地點內）。
- **Duration**：停留時長（分鐘），在人員離開後計算並填入。

**說明**：將停留時長的單位從「秒」改為「分鐘」，在計算時需要將秒數轉換為分鐘，通常取整數值或保留一位小數以提高精確度。
-----------------------------------------------------------------------

---

**4. TrafficStats 表**

用於統計特定時間段內的交通數據，包括人員數量、平均停留時間和佔用率。

```sql
CREATE TABLE TrafficStats (
    StatsID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
    LocationID INT NOT NULL FOREIGN KEY REFERENCES Location(LocationID),
    StartTime DATETIME NOT NULL,        -- 統計時間段的開始時間
    EndTime DATETIME NOT NULL,          -- 統計時間段的結束時間
    PersonCount INT NOT NULL,           -- 人數統計
    AverageDuration FLOAT NULL,         -- 平均停留時間（分鐘）
    OccupancyRate FLOAT NULL            -- 佔用率（百分比）
);
```

- **StatsID**：統計記錄的唯一識別碼。
- **LocationID**：關聯到Location表。
- **StartTime**和**EndTime**：統計的時間範圍。
- **PersonCount**：在該時間段內進入地點的人數。
- **AverageDuration**：平均停留時間（分鐘），可根據相關的StayRecord計算。
- **OccupancyRate**：佔用率，計算方式為：
  \[
  \text{OccupancyRate} = \left( \frac{\text{PersonCount}}{\text{Area} \times \text{每平方米容納人數}} \right) \times 100\%
  \]

**說明**：將平均停留時間的單位改為分鐘，以便與StayRecord的Duration一致。

---

**5. CongestionRecord 表**

用於記錄壅塞狀況。

```sql
CREATE TABLE CongestionRecord (
    CongestionID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
    LocationID INT NOT NULL FOREIGN KEY REFERENCES Location(LocationID),
    StartTime DATETIME NOT NULL,   -- 壅塞開始時間
    EndTime DATETIME NOT NULL,     -- 壅塞結束時間
    AverageOccupancyRate FLOAT NOT NULL   -- 壅塞期間的平均佔用率（百分比）
);
```

- **CongestionID**：壅塞記錄的唯一識別碼。
- **LocationID**：關聯到Location表。
- **StartTime**和**EndTime**：壅塞狀態的時間範圍。
- **AverageOccupancyRate**：壅塞期間的平均佔用率（百分比）。

---

**6. ComfortRecord 表**

用於記錄舒適度狀況。

```sql
CREATE TABLE ComfortRecord (
    ComfortID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
    LocationID INT NOT NULL FOREIGN KEY REFERENCES Location(LocationID),
    StartTime DATETIME NOT NULL,   -- 舒適狀態開始時間
    EndTime DATETIME NOT NULL,     -- 舒適狀態結束時間
    AverageOccupancyRate FLOAT NOT NULL   -- 舒適期間的平均佔用率（百分比）
);
```

- **ComfortID**：舒適度記錄的唯一識別碼。
- **LocationID**：關聯到Location表。
- **StartTime**和**EndTime**：舒適狀態的時間範圍。
- **AverageOccupancyRate**：舒適期間的平均佔用率（百分比）。

---

### **設計思路與詳細說明**

1. **停留時長單位調整**：

   - 將StayRecord中的Duration從「秒」改為「分鐘」，以便更直觀地了解人員停留的時間長短。
   - 在計算Duration時，可以使用：
     \[
     \text{Duration} = \frac{\text{DepartureTime} - \text{ArrivalTime}}{\text{60秒}}
     \]
     取整數或保留小數點後一位，以獲得較精確的分鐘數。

2. **平均停留時間的計算**：

   - 在TrafficStats表中，AverageDuration也調整為「分鐘」，與StayRecord的Duration保持一致。
   - 平均停留時間計算公式：
     \[
     \text{AverageDuration} = \frac{\sum \text{個別Duration}}{\text{人數}}
     \]
     注意只包含已完成停留（即DepartureTime不為空）的記錄。

3. **佔用率的計算**：

   - 佔用率仍以百分比表示，用於評估當前地點的人流狀況。
   - 計算方式為：
     \[
     \text{OccupancyRate} = \left( \frac{\text{PersonCount}}{\text{Area} \times \text{每平方米容納人數}} \right) \times 100\%
     \]
   - 可根據需要設定每平方米的容納人數，作為壅塞評估的參數。

4. **壅塞與舒適度的判斷**：

   - **壅塞**：當OccupancyRate ≥ 100%時，認為處於壅塞狀態。
   - **舒適**：當OccupancyRate < 60%時，認為處於舒適狀態。
   - **記錄壅塞與舒適度期間的平均佔用率**，以便後續分析。

5. **統計時間段的設計**：

   - 在TrafficStats、CongestionRecord和ComfortRecord中，使用StartTime和EndTime來定義統計或狀態的時間範圍。
   - 可以根據需求設定統計的頻率，例如每5分鐘、每10分鐘或每小時。

6. **資料關聯性**：

   - **PersonID**和**LocationID**作為外鍵，確保資料的一致性和完整性。
   - StayRecord、TrafficStats、CongestionRecord和ComfortRecord都關聯到Location表，以便針對不同地點進行分析。

---

### **實現統計的流程建議**

1. **人員進入/離開地點的處理**：

   - **進入時**：
     - 當檢測到新的人員ID時，創建一條新的StayRecord，記錄PersonID、LocationID和ArrivalTime。
   - **離開時**：
     - 當人員ID不再出現在檢測結果中，更新對應的StayRecord，填入DepartureTime。
     - 計算Duration（分鐘），並更新到StayRecord中。

2. **定期統計交通數據**：

   - **設定統計頻率**，例如每10分鐘。
   - **計算內容**：
     - **PersonCount**：在該時間段內進入地點的總人數。
     - **AverageDuration**：已完成停留的人員的平均停留時間（分鐘）。
     - **OccupancyRate**：根據PersonCount計算佔用率。
   - **插入TrafficStats表**，記錄統計結果。

3. **壅塞與舒適度狀態的記錄**：

   - **壅塞狀態**：
     - 當OccupancyRate連續超過壅塞閾值時，創建一條新的CongestionRecord，記錄StartTime。
     - 當OccupancyRate下降到壅塞閾值以下時，更新CongestionRecord的EndTime和AverageOccupancyRate。
   - **舒適狀態**：
     - 當OccupancyRate連續低於舒適度閾值時，創建一條新的ComfortRecord，記錄StartTime。
     - 當OccupancyRate上升到舒適度閾值以上時，更新ComfortRecord的EndTime和AverageOccupancyRate。

4. **資料的計算與更新**：

   - **平均佔用率**：
     - 在壅塞或舒適狀態期間，持續累加OccupancyRate，並在狀態結束時計算平均值。
   - **異常處理**：
     - 確保在計算平均值和插入資料時，處理可能的空值或異常情況，避免資料庫錯誤。

---

### **範例計算**

假設地點的面積為100平方米，每平方米容納人數設定為3人，則：

- **壅塞閾值**：100平方米 × 3人/平方米 = **300人**
- **舒適度閾值**：壅塞閾值的60%，即 **180人**

在一個10分鐘的統計時間段內：

- **PersonCount**：150人
- **AverageDuration**：15分鐘
- **OccupancyRate**：
  \[
  \text{OccupancyRate} = \left( \frac{150}{300} \right) \times 100\% = 50\%
  \]

根據OccupancyRate：

- **50% < 60%**，因此處於**舒適狀態**。

---

### **總結**

透過將停留時長調整為分鐘單位，資料更易於理解和分析。在重新設計的資料表中，我們：

- **簡化了資料結構**，專注於關鍵指標。
- **明確了計算方法**，便於實施統計和判斷。
- **提供了詳細的說明**，以便您在實際應用中更好地理解和使用這些資料表。

1. CurrentStay 表
用於即時記錄目前在各地點停留的人員。

sql

CREATE TABLE CurrentStay (
    CurrentStayID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
    PersonID INT NOT NULL FOREIGN KEY REFERENCES Person(PersonID),
    LocationID INT NOT NULL FOREIGN KEY REFERENCES Location(LocationID),
    ArrivalTime DATETIME NOT NULL,
    -- 不存儲 DepartureTime 和 Duration，因為這是當前停留的記錄
    UNIQUE (PersonID, LocationID)  -- 確保每個人同一時間只能在一個地點
);


CurrentStayID：當前停留記錄的唯一識別碼。
PersonID：關聯到Person表，指示是哪位人員。
LocationID：關聯到Location表，指示停留的地點。
ArrivalTime：人員進入地點的時間。
UNIQUE (PersonID, LocationID)：確保每個人員在同一時間只能有一條當前停留記錄，防止重複數據。
設計思路：

CurrentStay 表專門用於存儲當前在各地點停留的人員，便於即時查詢。
當人員進入某地點時，向 CurrentStay 表插入一條記錄；當人員離開時，刪除該記錄並更新 StayRecord 表。
2. FlowRecord 表
用於記錄人流總數，即人員進入和離開各地點的流量。

sql

CREATE TABLE FlowRecord (
    FlowID INT NOT NULL PRIMARY KEY IDENTITY(1,1),
    LocationID INT NOT NULL FOREIGN KEY REFERENCES Location(LocationID),
    EventTime DATETIME NOT NULL,    -- 事件發生的時間
    EventType VARCHAR(10) NOT NULL, -- 'Enter' 或 'Exit'
    PersonID INT NOT NULL FOREIGN KEY REFERENCES Person(PersonID)
);

FlowID：人流事件的唯一識別碼。
LocationID：關聯到Location表，指示發生事件的地點。
EventTime：事件發生的具體時間。
EventType：事件類型，值為 'Enter'（進入）或 'Exit'（離開）。
PersonID：關聯到Person表，指示是哪位人員。
設計思路：

FlowRecord 表記錄每一次人員進入和離開地點的事件，便於後續統計和分析人流趨勢。
透過此表，可以計算特定時間段內的總人流量。
